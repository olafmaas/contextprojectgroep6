{
    "project": {},
    "files": {
        "Ball.js": {
            "name": "Ball.js",
            "modules": {},
            "classes": {
                "Ball": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Body.js": {
            "name": "Body.js",
            "modules": {},
            "classes": {
                "Body": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Camera.js": {
            "name": "Camera.js",
            "modules": {},
            "classes": {
                "Camera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "CircularBody.js": {
            "name": "CircularBody.js",
            "modules": {},
            "classes": {
                "CircularBody": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Game.js": {
            "name": "Game.js",
            "modules": {},
            "classes": {
                "Game": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Input.js": {
            "name": "Input.js",
            "modules": {},
            "classes": {
                "Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Label.js": {
            "name": "Label.js",
            "modules": {},
            "classes": {
                "Label": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Player.js": {
            "name": "Player.js",
            "modules": {},
            "classes": {
                "Player": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Pole.js": {
            "name": "Pole.js",
            "modules": {},
            "classes": {
                "Pole": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Shield.js": {
            "name": "Shield.js",
            "modules": {},
            "classes": {
                "Shield": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ShieldBody.js": {
            "name": "ShieldBody.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "Sprite.js": {
            "name": "Sprite.js",
            "modules": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Ball": {
            "name": "Ball",
            "shortname": "Ball",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Ball.js",
            "line": 8,
            "description": "Ball constructor",
            "classdesc": "Ball constructor.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_radius",
                    "description": "- The radius of the ball.",
                    "type": "Number"
                }
            ]
        },
        "Body": {
            "name": "Body",
            "shortname": "Body",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Body.js",
            "line": 5,
            "description": "Body constructor",
            "classdesc": "The bass class from which the other bodies inherit.",
            "is_constructor": 1
        },
        "Camera": {
            "name": "Camera",
            "shortname": "Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Camera.js",
            "line": 3,
            "description": "Camera class",
            "classdesc": "Camera class",
            "is_constructor": 1
        },
        "CircularBody": {
            "name": "CircularBody",
            "shortname": "CircularBody",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "CircularBody.js",
            "line": 7,
            "description": "CircularBody Class",
            "classdesc": "CircularBody class which extends the Body class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_parent",
                    "description": "- Ball or pole object to which the body is assigned.",
                    "type": "Ball"
                }
            ]
        },
        "Game": {
            "name": "Game",
            "shortname": "Game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Game.js",
            "line": 3,
            "description": "Game class",
            "classdesc": "Game class for setting up the game/field.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "load",
                    "description": "- Load function",
                    "type": "Function"
                },
                {
                    "name": "update",
                    "description": "- Update function",
                    "type": "Function"
                },
                {
                    "name": "draw",
                    "description": "- Draw function",
                    "type": "Function"
                }
            ]
        },
        "Input": {
            "name": "Input",
            "shortname": "Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Input.js",
            "line": 1,
            "description": "Input class",
            "classdescr": "Input class",
            "is_constructor": 1
        },
        "Label": {
            "name": "Label",
            "shortname": "Label",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Label.js",
            "line": 1,
            "description": "A label class for writing text on the screen",
            "classdesc": "Label class for writing text on the screen.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_text",
                    "description": "- String to write on the screen.",
                    "type": "String"
                }
            ]
        },
        "Player": {
            "name": "Player",
            "shortname": "Player",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Player.js",
            "line": 3,
            "description": "Player class",
            "classdesc": "Class to represent players with properties."
        },
        "Pole": {
            "name": "Pole",
            "shortname": "Pole",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Pole.js",
            "line": 2,
            "description": "Pole class",
            "classdesc": "A simple pole class which extends Ball",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_radius",
                    "description": "- The radius of the pole.",
                    "type": "Number"
                }
            ]
        },
        "Shield": {
            "name": "Shield",
            "shortname": "Shield",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Shield.js",
            "line": 6,
            "description": "Shield constructor",
            "classdesc": "Shield constructor.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_pole",
                    "description": "- The pole which the shield protects",
                    "type": "Pole"
                }
            ]
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Sprite.js",
            "line": 1,
            "description": "Sprite class",
            "classdesc": "Sprite class for loading textures",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "Ball.js",
            "line": 29,
            "description": "Draws the ball on the canvas",
            "itemtype": "method",
            "name": "Ball#draw",
            "params": [
                {
                    "name": "_canvasContext",
                    "description": "- The canvas context on which the ball will be drawn.",
                    "type": "CanvasContext"
                }
            ],
            "class": "Ball"
        },
        {
            "file": "Ball.js",
            "line": 43,
            "description": "Updates the position of the ball",
            "itemtype": "method",
            "name": "Ball#update",
            "class": "Ball"
        },
        {
            "file": "Ball.js",
            "line": 51,
            "description": "Creates the body of the ball",
            "itemtype": "method",
            "name": "Ball#enableBody",
            "class": "Ball"
        },
        {
            "file": "Ball.js",
            "line": 59,
            "description": "Collision handler for the ball\nIt calls the collision function in the body class which takes care of the rest",
            "itemtype": "method",
            "name": "Ball#collidesWith",
            "params": [
                {
                    "name": "_other",
                    "description": "- The other object with which the ball collides",
                    "type": "Object"
                }
            ],
            "class": "Ball"
        },
        {
            "file": "Ball.js",
            "line": 72,
            "description": "Sets the position of the ball in the canvas.",
            "itemtype": "method",
            "name": "Ball#setPosition",
            "params": [
                {
                    "name": "_x",
                    "description": "- The x coordinate of the center of the ball.",
                    "type": "Number"
                },
                {
                    "name": "_y",
                    "description": "- The y coordinate of the center of the ball.",
                    "type": "Number"
                }
            ],
            "class": "Ball"
        },
        {
            "file": "Ball.js",
            "line": 82,
            "description": "Sets the radius of the ball.",
            "itemtype": "method",
            "name": "Ball#setRadius",
            "params": [
                {
                    "name": "_radius",
                    "description": "- The radius of the ball in pixels.",
                    "type": "Number"
                }
            ],
            "class": "Ball"
        },
        {
            "file": "Ball.js",
            "line": 92,
            "description": "Sets the color of the ball.",
            "itemtype": "method",
            "name": "Ball#setColor",
            "params": [
                {
                    "name": "_color",
                    "description": "- The hex value of the color.",
                    "type": "Hex value"
                }
            ],
            "class": "Ball"
        },
        {
            "file": "Ball.js",
            "line": 102,
            "description": "Retrieves both x and y coordinate of the middle of the ball.",
            "itemtype": "method",
            "name": "Ball#getPosition",
            "return": {
                "description": "The x and y coordinate of the middle of the ball.",
                "type": "Number, number"
            },
            "class": "Ball"
        },
        {
            "file": "Ball.js",
            "line": 112,
            "description": "Retrieves the radius of the ball.",
            "itemtype": "method",
            "name": "Ball#getRadius",
            "return": {
                "description": "The radius of the ball.",
                "type": "Number"
            },
            "class": "Ball"
        },
        {
            "file": "Ball.js",
            "line": 122,
            "description": "Retrieves the color of the ball.",
            "itemtype": "method",
            "name": "Ball#getColor",
            "return": {
                "description": "The color of the ball in hex value.",
                "type": "Hex"
            },
            "class": "Ball"
        },
        {
            "file": "Ball.js",
            "line": 132,
            "description": "Retrieves the body of the ball.",
            "itemtype": "method",
            "name": "Ball#getBody",
            "return": {
                "description": "The body of the ball.",
                "type": "Body"
            },
            "class": "Ball"
        },
        {
            "file": "Body.js",
            "line": 22,
            "description": "Updates the position of the body",
            "itemtype": "method",
            "name": "Body#update",
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 46,
            "description": "Gets the angle from this object to another object",
            "itemtype": "method",
            "name": "getAngleToObject",
            "params": [
                {
                    "name": "_other",
                    "description": "the body of the other object",
                    "type": "Body"
                }
            ],
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 63,
            "description": "Sets the velocity of the ball. \nIt also calculates the corresponding speed values for the x and y axis.",
            "itemtype": "method",
            "name": "Body#setVelocity",
            "params": [
                {
                    "name": "_vel",
                    "description": "- The velocity of the ball.",
                    "type": "Number"
                }
            ],
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 79,
            "description": "Sets the velocity direction (angle) of the ball. \nIt also calculates the corresponding speed values for the x and y axis.",
            "itemtype": "method",
            "name": "Body#setVelocityDirection",
            "params": [
                {
                    "name": "_direction",
                    "description": "- The direction (angle) of the ball in radians.",
                    "type": "Number"
                }
            ],
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 95,
            "description": "Sets the x and y speed values of the ball.\nIt also calculates the corresponding angle and velocity.\nNote: The given speed can also be negative, it then moves in the opposite direction.",
            "itemtype": "method",
            "name": "Body#setXYSpeed",
            "params": [
                {
                    "name": "_x",
                    "description": "- The speed on the x axis (pixels per redraw).",
                    "type": "Number"
                },
                {
                    "name": "_y",
                    "description": "- The speed on the y axis (pixels per redraw).",
                    "type": "Number"
                }
            ],
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 114,
            "description": "Retrieves the x and y speed.",
            "itemtype": "method",
            "name": "Body#getXYSpeed",
            "return": {
                "description": "The x and y speeds of the body.",
                "type": "Number, number"
            },
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 124,
            "description": "Calculates the velocity direction (angle) in which the ball is moving, by using the current x and y speed of the ball.",
            "itemtype": "method",
            "name": "Body#calculateVelocity",
            "return": {
                "description": "The angle in radians.",
                "type": "Number"
            },
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 134,
            "description": "Calculates the velocity at which the ball is moving, by using the current x and y speed of the ball.",
            "itemtype": "method",
            "name": "Body#calculateVDirection",
            "return": {
                "description": "The velocity of the ball.",
                "type": "Number"
            },
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 147,
            "description": "Reverts the y speed (positive to negative and vice versa).\nIt also calculates the new angle (speed remains the same).",
            "itemtype": "method",
            "name": "Body#revertYSpeed",
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 158,
            "description": "Reverts the x speed (positive to negative and vice versa).\nIt also calculates the new angle (speed remains the same).",
            "itemtype": "method",
            "name": "Body#revertXSpeed",
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 169,
            "description": "Retrieves the position.",
            "itemtype": "method",
            "name": "Body#getPosition",
            "return": {
                "description": "The x and y coordinate the position of the body.",
                "type": "Number, number"
            },
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 179,
            "description": "Retrieves the velocity of the body.",
            "itemtype": "method",
            "name": "Body#getVelocity",
            "return": {
                "description": "The current velocity of the body.",
                "type": "Number"
            },
            "class": "Body"
        },
        {
            "file": "Body.js",
            "line": 189,
            "description": "Retrieves the velocity direction (angle) of the body.",
            "itemtype": "method",
            "name": "Body#getAngle",
            "return": {
                "description": "The current angle of the body in radians.",
                "type": "Number"
            },
            "class": "Body"
        },
        {
            "file": "Camera.js",
            "line": 14,
            "description": "Get the center position of the camera",
            "itemtype": "method",
            "name": "getCenter",
            "return": {
                "description": "The center, (x, y) coordinates, of the camera.",
                "type": "Number, number"
            },
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 24,
            "description": "Get the zoom factor of the camera",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "The current zoom level of the camera.",
                "type": "Number"
            },
            "class": "Camera"
        },
        {
            "file": "CircularBody.js",
            "line": 18,
            "description": "Constructor for the circular body",
            "itemtype": "method",
            "name": "CircularBody#constructor",
            "params": [
                {
                    "name": "The",
                    "description": "circle object",
                    "type": "_parent"
                }
            ],
            "class": "CircularBody"
        },
        {
            "file": "CircularBody.js",
            "line": 28,
            "description": "Updates the position of the circle",
            "itemtype": "method",
            "name": "CircularBody#update",
            "class": "CircularBody"
        },
        {
            "file": "CircularBody.js",
            "line": 37,
            "description": "This method uses the previous methods to check whether the circle collides\nAnd then handles the collision",
            "itemtype": "method",
            "name": "CircularBody#handleCollision",
            "params": [
                {
                    "name": "_other",
                    "description": "- Object which collides with the shield",
                    "type": "Object"
                }
            ],
            "class": "CircularBody"
        },
        {
            "file": "CircularBody.js",
            "line": 54,
            "description": "Handles the collision of circle and ball",
            "itemtype": "method",
            "name": "CircularBody#handleBallCollision",
            "params": [
                {
                    "name": "_other",
                    "description": "- Ball object which collides with the circle",
                    "type": "Ball"
                }
            ],
            "class": "CircularBody"
        },
        {
            "file": "CircularBody.js",
            "line": 77,
            "description": "Checks if the ball collides with world boundaries and handles it",
            "itemtype": "method",
            "name": "CircularBody#checkWorldBounds",
            "params": [
                {
                    "name": "_game",
                    "description": "- The game/playing field",
                    "type": "Game"
                }
            ],
            "class": "CircularBody"
        },
        {
            "file": "Game.js",
            "line": 18,
            "description": "Draw function",
            "itemtype": "method",
            "name": "Game#parentDraw",
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 29,
            "description": "Create function for the game field (canvas)",
            "itemtype": "method",
            "name": "Game#createCanvas",
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 45,
            "description": "Function which updates the width and height",
            "itemtype": "method",
            "name": "Game#updateGameDimensions",
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 62,
            "description": "Function which clears the playing field",
            "itemtype": "method",
            "name": "Game#clearCanvas",
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 73,
            "description": "Initializes the variables",
            "itemtype": "method",
            "name": "Game#Initialize",
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 87,
            "description": "Starts up the game itself",
            "itemtype": "method",
            "name": "Game#Boot",
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 101,
            "description": "Returns the input",
            "itemtype": "method",
            "name": "Game#getInput",
            "return": {
                "description": "The input object",
                "type": "Input"
            },
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 110,
            "description": "Returns the background color",
            "itemtype": "method",
            "name": "Game#getBackgroundColor",
            "return": {
                "description": "The background color",
                "type": "BackGroundColor"
            },
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 119,
            "description": "Sets the background color",
            "itemtype": "method",
            "name": "Game#setBackgroundColor",
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 127,
            "description": "Returns the width of the canvas",
            "itemtype": "method",
            "name": "Game#getWidth",
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 135,
            "description": "Returns the height of the canvas",
            "itemtype": "method",
            "name": "Game#getHeight",
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 143,
            "description": "Sets the width of the canvas",
            "itemtype": "method",
            "name": "Game#setWidth",
            "class": "Game"
        },
        {
            "file": "Game.js",
            "line": 151,
            "description": "Sets the height of the canvas",
            "itemtype": "method",
            "name": "Game#setHeight",
            "class": "Game"
        },
        {
            "file": "Input.js",
            "line": 13,
            "description": "The update function for updating the input",
            "itemtype": "method",
            "name": "Input#update",
            "class": "Input"
        },
        {
            "file": "Input.js",
            "line": 24,
            "description": "Listener for mouse movement to save X and Y position",
            "itemtype": "method",
            "name": "Input#mouseMoveListener",
            "class": "Input"
        },
        {
            "file": "Input.js",
            "line": 37,
            "description": "Listener for mouse down for the pause functionality (debuggin purpose only)",
            "itemtype": "method",
            "name": "Input#mouseDownListener",
            "class": "Input"
        },
        {
            "file": "Label.js",
            "line": 16,
            "description": "Draws the label on the game canvas",
            "itemtype": "method",
            "name": "Label#draw",
            "params": [
                {
                    "name": "_canvasContext",
                    "description": "- The canvascontext which should be drawn.",
                    "type": "CanvasContext"
                }
            ],
            "class": "Label"
        },
        {
            "file": "Label.js",
            "line": 26,
            "description": "Gets the string which is the labels text",
            "itemtype": "method",
            "name": "Label#getText",
            "return": {
                "description": "The text of the label",
                "type": "String"
            },
            "class": "Label"
        },
        {
            "file": "Label.js",
            "line": 35,
            "description": "Gets the position of the top-left corner of the label",
            "itemtype": "method",
            "name": "Label#getPosition",
            "return": {
                "description": "An position object containing and x and y property",
                "type": "Object"
            },
            "class": "Label"
        },
        {
            "file": "Label.js",
            "line": 45,
            "description": "Gets the name of the font",
            "itemtype": "method",
            "name": "Label#getFont",
            "return": {
                "description": "The name of the font.",
                "type": "String"
            },
            "class": "Label"
        },
        {
            "file": "Label.js",
            "line": 54,
            "description": "Gets the font size in pixels",
            "itemtype": "method",
            "name": "Label#getFontSize",
            "return": {
                "description": "The font size in pixels.",
                "type": "Float"
            },
            "class": "Label"
        },
        {
            "file": "Label.js",
            "line": 63,
            "description": "Gets the color of the label",
            "itemtype": "method",
            "name": "Label#getColor",
            "return": {
                "description": "The hex code of the color.",
                "type": "Hexcolor"
            },
            "class": "Label"
        },
        {
            "file": "Label.js",
            "line": 72,
            "description": "Sets the string which is the labels text",
            "itemtype": "method",
            "name": "Label#setText",
            "params": [
                {
                    "name": "_text",
                    "description": "- The text which should be displayed on the label.",
                    "type": "String"
                }
            ],
            "class": "Label"
        },
        {
            "file": "Label.js",
            "line": 81,
            "description": "Sets the position of the left-top corner of the label where it's drawn",
            "itemtype": "method",
            "name": "Label#setPosition",
            "params": [
                {
                    "name": "_position",
                    "description": "- An object containing an x and y value",
                    "type": "Object"
                }
            ],
            "class": "Label"
        },
        {
            "file": "Label.js",
            "line": 90,
            "description": "Sets the font of the label",
            "itemtype": "method",
            "name": "Label#setFont",
            "params": [
                {
                    "name": "_font",
                    "description": "- The name of the font.",
                    "type": "String"
                }
            ],
            "class": "Label"
        },
        {
            "file": "Label.js",
            "line": 99,
            "description": "Sets the font size in pixels",
            "itemtype": "method",
            "name": "Label#setFontSize",
            "params": [
                {
                    "name": "_fontSize",
                    "description": "- The size of the font in pixels.",
                    "type": "Float"
                }
            ],
            "class": "Label"
        },
        {
            "file": "Label.js",
            "line": 109,
            "description": "Sets the color of the label",
            "itemtype": "method",
            "name": "Label#setColor",
            "params": [
                {
                    "name": "_color",
                    "description": "- The color in hexidecimal form.",
                    "type": "Hexcolor"
                }
            ],
            "class": "Label"
        },
        {
            "file": "Player.js",
            "line": 18,
            "description": "Increments the current points by the given amounts",
            "itemtype": "method",
            "name": "Player#incrementPoints",
            "params": [
                {
                    "name": "_points",
                    "description": "- The amount of points by which it should be incremented.",
                    "type": "Number"
                }
            ],
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 28,
            "description": "Increments the current score by the given amounts",
            "itemtype": "method",
            "name": "Player#incrementScore",
            "params": [
                {
                    "name": "_score",
                    "description": "- The score by which it should be incremented.",
                    "type": "Number"
                }
            ],
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 38,
            "description": "Sets the name of the player",
            "itemtype": "method",
            "name": "Player#setName",
            "params": [
                {
                    "name": "_name",
                    "description": "- The name of the player.",
                    "type": "String"
                }
            ],
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 48,
            "description": "Sets theh pole belonging to the player",
            "itemtype": "method",
            "name": "Player#setPole",
            "params": [
                {
                    "name": "_pole",
                    "description": "- The pole belonging to the player",
                    "type": "Pole"
                }
            ],
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 58,
            "description": "Sets the shield belonging to the player",
            "itemtype": "method",
            "name": "Player#setShield",
            "params": [
                {
                    "name": "_shield",
                    "description": "- The shield belonging to the player.",
                    "type": "Shield"
                }
            ],
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 68,
            "description": "Sets the amount of poits the player is worth",
            "itemtype": "method",
            "name": "Player#setPoints",
            "params": [
                {
                    "name": "_points",
                    "description": "- The amount of points.",
                    "type": "Number"
                }
            ],
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 78,
            "description": "Sets the current score of the player",
            "itemtype": "method",
            "name": "Player#setScore",
            "params": [
                {
                    "name": "_score",
                    "description": "- The score",
                    "type": "Number"
                }
            ],
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 88,
            "description": "Sets the highscore of the player",
            "itemtype": "method",
            "name": "Player#setHighscore",
            "params": [
                {
                    "name": "_highscore",
                    "description": "- The highscore",
                    "type": "Number"
                }
            ],
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 98,
            "description": "Returns the name of the player",
            "itemtype": "method",
            "name": "Player#getName",
            "return": {
                "description": "The name of the player",
                "type": "String"
            },
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 108,
            "description": "Returns the pole belonging to the player",
            "itemtype": "method",
            "name": "Player#getPole",
            "return": {
                "description": "The pole belonging to the player.",
                "type": "Pole"
            },
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 118,
            "description": "Returns the shield belonging to the player",
            "itemtype": "method",
            "name": "Player#getShield",
            "return": {
                "description": "The shield belonging to the player.",
                "type": "Shield"
            },
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 128,
            "description": "Returns the points the player is worth on hit.",
            "itemtype": "method",
            "name": "Player#getPoints",
            "return": {
                "description": "The points the player is currently worth.",
                "type": "Number"
            },
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 138,
            "description": "Returns the current score of the player",
            "itemtype": "method",
            "name": "Player#getScore",
            "return": {
                "description": "The current score of the player.",
                "type": "Number"
            },
            "class": "Player"
        },
        {
            "file": "Player.js",
            "line": 148,
            "description": "Returns the current highscore of the player",
            "itemtype": "method",
            "name": "Player#getHighscore",
            "return": {
                "description": "The current highscore of the player.",
                "type": "Number"
            },
            "class": "Player"
        },
        {
            "file": "Pole.js",
            "line": 20,
            "description": "Handles everything when the pole is hit:\nfrom setting the hit flag, to managing the cooldown of the pole.",
            "itemtype": "method",
            "name": "Pole#isHit",
            "class": "Pole"
        },
        {
            "file": "Pole.js",
            "line": 39,
            "description": "Handles the cooldown period of the pole, which includes a change of color\nand not being able to get hit again for some amount of time.",
            "itemtype": "method",
            "name": "Pole#coolDown",
            "class": "Pole"
        },
        {
            "file": "Shield.js",
            "line": 25,
            "description": "Draws the shield on the canvas",
            "itemtype": "method",
            "name": "Shield#draw",
            "params": [
                {
                    "name": "_canvasContext",
                    "description": "- The canvas context on which the shield will be drawn.",
                    "type": "CanvasContext"
                }
            ],
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 37,
            "description": "Updates the position of the shield",
            "itemtype": "method",
            "name": "Shield#update",
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 47,
            "description": "Creates the body of the shield",
            "itemtype": "method",
            "name": "Shield#enableBody",
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 56,
            "description": "Calculates the angle of the shield (in radians) depending on the current mouse input",
            "itemtype": "method",
            "name": "Shield#calculateAngle",
            "return": {
                "description": "The angle between the shield and the current mousepointer.",
                "type": "Float"
            },
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 66,
            "description": "Sets the angle of the shield.",
            "itemtype": "method",
            "name": "Shield#setAngle",
            "params": [
                {
                    "name": "_angle",
                    "description": "- The angle of the shield in radians.",
                    "type": "Number"
                }
            ],
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 76,
            "description": "Sets the radius of the shield.",
            "itemtype": "method",
            "name": "Shield#setRadius",
            "params": [
                {
                    "name": "_radius",
                    "description": "- The radius of the shield",
                    "type": "Number"
                }
            ],
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 86,
            "description": "Sets the color of the shield.",
            "itemtype": "method",
            "name": "Shield#setColor",
            "params": [
                {
                    "name": "_color",
                    "description": "- The color of the shield in hex value.",
                    "type": "Hex"
                }
            ],
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 95,
            "description": "Sets the size of the shield.",
            "itemtype": "method",
            "name": "Shield#setSize",
            "params": [
                {
                    "name": "_size",
                    "description": "- The size of the shield.",
                    "type": "Number"
                }
            ],
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 104,
            "description": "Sets the position of the shield in the canvas.",
            "itemtype": "method",
            "name": "Shield#setPosition",
            "params": [
                {
                    "name": "_pole",
                    "description": "- The pole to which the shield will be assigned",
                    "type": "Pole"
                }
            ],
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 117,
            "description": "Retrieves both x and y coordinate of the middle of the shield.",
            "itemtype": "method",
            "name": "Shield#getPosition",
            "return": {
                "description": "The x and y coordinate of the middle of the shield.",
                "type": "Number, number"
            },
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 127,
            "description": "Retrieves the pole belonging to the shield.",
            "itemtype": "method",
            "name": "Shield#getPole",
            "return": {
                "description": "The pole the shield protects.",
                "type": "Pole"
            },
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 137,
            "description": "Retrieves the current angle of the shield.",
            "itemtype": "method",
            "name": "Shield#getAngle",
            "return": {
                "description": "The angle of the shield in radians.",
                "type": "Number"
            },
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 147,
            "description": "Retrieves the size of the radius of the shield.",
            "itemtype": "method",
            "name": "Shield#getRadius",
            "return": {
                "description": "Radius of the shield.",
                "type": "Number"
            },
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 157,
            "description": "Retrieves the color of the shield.",
            "itemtype": "method",
            "name": "Shield#getColor",
            "return": {
                "description": "The color of the shield in hex value",
                "type": "Hex"
            },
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 167,
            "description": "Retrieves the size of the shield (circle)",
            "itemtype": "method",
            "name": "Shield#getSize",
            "return": {
                "description": "Size of the shield.",
                "type": "Number"
            },
            "class": "Shield"
        },
        {
            "file": "Shield.js",
            "line": 177,
            "description": "Retrieves the body of the shield.",
            "itemtype": "method",
            "name": "Shield#getBody",
            "return": {
                "description": "The body of the shield.",
                "type": "Body"
            },
            "class": "Shield"
        },
        {
            "file": "ShieldBody.js",
            "line": 8,
            "class": "Sprite"
        },
        {
            "file": "ShieldBody.js",
            "line": 17,
            "description": "Constructor for the shield body",
            "itemtype": "method",
            "name": "ShieldBody#constructor",
            "params": [
                {
                    "name": "_parent",
                    "description": "- The shield object",
                    "type": "Shield"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "ShieldBody.js",
            "line": 29,
            "description": "Updates the angle of the shield",
            "itemtype": "method",
            "name": "ShieldBody#update",
            "class": "Sprite"
        },
        {
            "file": "ShieldBody.js",
            "line": 39,
            "description": "Method to handle a collision",
            "itemtype": "method",
            "name": "Shieldbody#handleIndividual",
            "params": [
                {
                    "name": "_other",
                    "description": "- The other item that collides",
                    "type": "Body"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "Sprite.js",
            "line": 15,
            "description": "Function which loads a texture",
            "itemtype": "method",
            "name": "Sprite#LoadContent",
            "params": [
                {
                    "name": "texturePath",
                    "description": "- texture's path",
                    "type": "String"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "Sprite.js",
            "line": 25,
            "description": "Function which draws the sprite",
            "itemtype": "method",
            "name": "Sprite#Draw",
            "params": [
                {
                    "name": "canvasContext",
                    "description": "- The playing field",
                    "type": "Canvas"
                }
            ],
            "class": "Sprite"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: classdesc",
            "line": " Ball.js:8"
        },
        {
            "message": "unknown tag: classdesc",
            "line": " Body.js:5"
        },
        {
            "message": "unknown tag: classdesc",
            "line": " Camera.js:3"
        },
        {
            "message": "unknown tag: classdesc",
            "line": " CircularBody.js:7"
        },
        {
            "message": "unknown tag: classdesc",
            "line": " Game.js:3"
        },
        {
            "message": "unknown tag: classdescr",
            "line": " Input.js:1"
        },
        {
            "message": "unknown tag: classdesc",
            "line": " Label.js:1"
        },
        {
            "message": "unknown tag: classdesc",
            "line": " Player.js:3"
        },
        {
            "message": "unknown tag: classdesc",
            "line": " Pole.js:2"
        },
        {
            "message": "unknown tag: classdesc",
            "line": " Shield.js:6"
        },
        {
            "message": "unknown tag: classdesc",
            "line": " Sprite.js:1"
        },
        {
            "message": "Missing item type",
            "line": " ShieldBody.js:8"
        }
    ]
}